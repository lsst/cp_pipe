description: cp_pipe two-LED flat calibration for LSST isr task
tasks:
  cpFlatIsr:
    class: lsst.ip.isr.IsrTaskLSST
    config:
      connections.ccdExposure: "raw"
      connections.outputExposure: "cpFlatIsrExp"
      python: |
        from lsst.cp.pipe import configureIsrTaskLSSTForCalibrations

        configureIsrTaskLSSTForCalibrations(config)

        config.doCrosstalk = True
        config.crosstalk.doQuadraticCrosstalkCorrection = True
        config.doApplyGains = True
        config.doLinearize = True
        config.doDeferredCharge = True
        config.doBias = True
        config.doDark = True
        # TODO DM-50363: Investigate if this can be turned on, looking
        # at performance and quality of the BF correction.
        config.doBrighterFatter = False
  cpFlatMeasure:
    class: lsst.cp.pipe.CpFlatMeasureTask
    config:
      connections.inputExp: "cpFlatIsrExp"
      connections.outputStats: "cpFlatStatistics"
  cpFlatBlueNormalize:
    class: lsst.cp.pipe.CpFlatNormalizationTask
    config:
      connections.inputMDs: "cpFlatStatistics"
      connections.outputScales: "cpFlatBlueNormalizeScales"
      doDownSelection: true
  cpFlatRedNormalize:
    class: lsst.cp.pipe.CpFlatNormalizationTask
    config:
      connections.inputMDs: "cpFlatStatistics"
      connections.outputScales: "cpFlatRedNormalizeScales"
      doDownSelection: true
  cpFlatBlueCombine:
    class: lsst.cp.pipe.CalibCombineByFilterTask
    config:
      connections.inputExpHandles: "cpFlatIsrExp"
      connections.inputScales: "cpFlatBlueNormalizeScales"
      connections.outputData: "flat_blue"
      calibrationType: "flat"
      exposureScaling: "InputList"
      scalingLevel: "DETECTOR"
  cpFlatRedCombine:
    class: lsst.cp.pipe.CalibCombineByFilterTask
    config:
      connections.inputExpHandles: "cpFlatIsrExp"
      connections.inputScales: "cpFlatRedNormalizeScales"
      connections.outputData: "flat_red"
      calibrationType: "flat"
      exposureScaling: "InputList"
      scalingLevel: "DETECTOR"
  cpFlatRedBlueCombine:
    class: lsst.cp.pipe.CalibCombineTwoFlatsByFilterTask
  cpFlatBlueBin8:
    class: lsst.pipe.tasks.visualizeVisit.VisualizeBinCalibFilterTask
    config:
      connections.inputExp: 'flat_blue'
      connections.outputExp: 'flatBlueBin8'
      binning: 8
  cpFlatBlueBin64:
    class: lsst.pipe.tasks.visualizeVisit.VisualizeBinCalibFilterTask
    config:
      connections.inputExp: 'flat_blue'
      connections.outputExp: 'flatBlueBin64'
      binning: 64
  cpFlatBlueMosaic8:
    class: lsst.pipe.tasks.visualizeVisit.VisualizeMosaicCalibFilterTask
    config:
      connections.inputExps: 'flatBlueBin8'
      connections.outputData: 'flatBlueMosaic8'
      binning: 8
  cpFlatBlueMosaic64:
    class: lsst.pipe.tasks.visualizeVisit.VisualizeMosaicCalibFilterTask
    config:
      connections.inputExps: 'flatBlueBin64'
      connections.outputData: 'flatBlueMosaic64'
      binning: 64
  cpFlatRedBin8:
    class: lsst.pipe.tasks.visualizeVisit.VisualizeBinCalibFilterTask
    config:
      connections.inputExp: 'flat_red'
      connections.outputExp: 'flatRedBin8'
      binning: 8
  cpFlatRedBin64:
    class: lsst.pipe.tasks.visualizeVisit.VisualizeBinCalibFilterTask
    config:
      connections.inputExp: 'flat_red'
      connections.outputExp: 'flatRedBin64'
      binning: 64
  cpFlatRedMosaic8:
    class: lsst.pipe.tasks.visualizeVisit.VisualizeMosaicCalibFilterTask
    config:
      connections.inputExps: 'flatRedBin8'
      connections.outputData: 'flatRedMosaic8'
      binning: 8
  cpFlatRedMosaic64:
    class: lsst.pipe.tasks.visualizeVisit.VisualizeMosaicCalibFilterTask
    config:
      connections.inputExps: 'flatRedBin64'
      connections.outputData: 'flatRedMosaic64'
      binning: 64
  cpFlatBin8:
    class: lsst.pipe.tasks.visualizeVisit.VisualizeBinCalibFilterTask
    config:
      connections.inputExp: 'flat'
      connections.outputExp: 'flatBin8'
      binning: 8
  cpFlatBin64:
    class: lsst.pipe.tasks.visualizeVisit.VisualizeBinCalibFilterTask
    config:
      connections.inputExp: 'flat'
      connections.outputExp: 'flatBin64'
      binning: 64
  cpFlatMosaic8:
    class: lsst.pipe.tasks.visualizeVisit.VisualizeMosaicCalibFilterTask
    config:
      connections.inputExps: 'flatBin8'
      connections.outputData: 'flatMosaic8'
      binning: 8
  cpFlatMosaic64:
    class: lsst.pipe.tasks.visualizeVisit.VisualizeMosaicCalibFilterTask
    config:
      connections.inputExps: 'flatBin64'
      connections.outputData: 'flatMosaic64'
      binning: 64
contracts:
  - cpFlatIsr.doFlat == False
  - cpFlatIsr.doBootstrap == False
  - cpFlatMeasure.connections.inputExp == cpFlatIsr.connections.outputExposure
  - cpFlatBlueCombine.calibrationType == "flat"
  - cpFlatBlueCombine.exposureScaling == "InputList"
  - cpFlatBlueNormalize.connections.inputMDs == cpFlatMeasure.connections.outputStats
  - cpFlatBlueCombine.connections.inputExpHandles == cpFlatIsr.connections.outputExposure
  - cpFlatBlueCombine.connections.inputScales == cpFlatBlueNormalize.connections.outputScales
  - cpFlatRedCombine.calibrationType == "flat"
  - cpFlatRedCombine.exposureScaling == "InputList"
  - cpFlatRedNormalize.connections.inputMDs == cpFlatMeasure.connections.outputStats
  - cpFlatRedCombine.connections.inputExpHandles == cpFlatIsr.connections.outputExposure
  - cpFlatRedCombine.connections.inputScales == cpFlatRedNormalize.connections.outputScales
  - cpFlatBlueNormalize.doDownSelection == True
  - cpFlatRedNormalize.doDownSelection == True
  - (cpFlatBlueNormalize.downSelectionField != cpFlatRedNormalize.downSelectionField) or (cpFlatBlueNormalize.downSelectionValue != cpFlatRedNormalize.downSelectionValue)
  - cpFlatRedBlueCombine.connections.inputFlatOneHandle == cpFlatBlueCombine.connections.outputData
  - cpFlatRedBlueCombine.connections.inputFlatTwoHandle == cpFlatRedCombine.connections.outputData
  - cpFlatRedBlueCombine.calibrationType == "flat"
  - cpFlatBlueBin8.binning == cpFlatBlueMosaic8.binning
  - cpFlatBlueBin64.binning == cpFlatBlueMosaic64.binning
  - cpFlatBlueBin8.connections.inputExp == cpFlatBlueCombine.connections.outputData
  - cpFlatBlueBin64.connections.inputExp == cpFlatBlueCombine.connections.outputData
  - cpFlatBlueMosaic8.connections.inputExps == cpFlatBlueBin8.connections.outputExp
  - cpFlatBlueMosaic64.connections.inputExps == cpFlatBlueBin64.connections.outputExp
  - cpFlatRedBin8.binning == cpFlatRedMosaic8.binning
  - cpFlatRedBin64.binning == cpFlatRedMosaic64.binning
  - cpFlatRedBin8.connections.inputExp == cpFlatRedCombine.connections.outputData
  - cpFlatRedBin64.connections.inputExp == cpFlatRedCombine.connections.outputData
  - cpFlatRedMosaic8.connections.inputExps == cpFlatRedBin8.connections.outputExp
  - cpFlatRedMosaic64.connections.inputExps == cpFlatRedBin64.connections.outputExp
  - cpFlatBin8.binning == cpFlatMosaic8.binning
  - cpFlatBin64.binning == cpFlatMosaic64.binning
  - cpFlatBin8.connections.inputExp == cpFlatRedBlueCombine.connections.outputData
  - cpFlatBin64.connections.inputExp == cpFlatRedBlueCombine.connections.outputData
  - cpFlatMosaic8.connections.inputExps == cpFlatBin8.connections.outputExp
  - cpFlatMosaic64.connections.inputExps == cpFlatBin64.connections.outputExp
