description: cp_pipe linearizer calibration construction.
tasks:
  cpLinearizerIsr:
    class: lsst.ip.isr.IsrTaskLSST
    config:
      connections.ccdExposure: "raw"
      connections.outputExposure: "cpLinearizerIsrExp"
      python: |
        from lsst.cp.pipe import configureIsrTaskLSSTForCalibrations

        configureIsrTaskLSSTForCalibrations(config)

        config.doBootstrap = True
        config.doCrosstalk = True
        config.crosstalk.doQuadraticCrosstalkCorrection = False
        config.doDefect = True
  cpLinearizerPtcExtractPair:
    class: lsst.cp.pipe.ptc.PhotonTransferCurveExtractPairTask
    config:
      connections.inputExp: "cpLinearizerIsrExp"
      connections.outputCovariance: "cpLinearizerPtcPartial"
      maximumRangeCovariancesAstier: 1
      numEdgeSuspect: 20
      edgeMaskLevel: "AMP"
      useEfdPhotodiodeData: true
      auxiliaryHeaderKeys: ["TEMP6"]
  cpLinearizerPtcSolve:
    class: lsst.cp.pipe.ptc.PhotonTransferCurveSolveTask
    config:
      connections.inputCovariances: "cpLinearizerPtcPartial"
      connections.outputPtcDataset: "linearizerPtc"
      # This is just used as a placeholder.
      ptcFitType: "EXPAPPROXIMATION"
      maximumRangeCovariancesAstier: 1
      maximumRangeCovariancesAstierFullCovFit: 1
  cpLinearizerUnnormalizedSolve1:
    class: lsst.cp.pipe.LinearitySolveTask
    config:
      useLinearizerPtc: true
      useFocalPlaneNormalization: false
      connections.inputLinearizerPtc: "linearizerPtc"
      connections.outputLinearizer: "linearizerUnnormalized1"
      linearityType: "Spline"
      splineKnots: 10
      trimmedState: false
      usePhotodiode: true
  cpLinearizerNormalize1:
    class: lsst.cp.pipe.LinearityNormalizeTask
    config:
      connections.inputPtcHandles: "linearizerPtc"
      connections.inputLinearizerHandles: "linearizerUnnormalized1"
      connections.outputNormalization: "cpLinearizerNormalization1"
  cpLinearizerUnnormalizedSolve2:
    class: lsst.cp.pipe.LinearitySolveTask
    config:
      useLinearizerPtc: true
      useFocalPlaneNormalization: true
      connections.inputLinearizerPtc: "linearizerPtc"
      connections.outputLinearizer: "linearizerUnnormalized2"
      connections.inputNormalization: "cpLinearizerNormalization1"
      linearityType: "Spline"
      splineKnots: 10
      trimmedState: false
      usePhotodiode: true
  cpLinearizerNormalize2:
    class: lsst.cp.pipe.LinearityNormalizeTask
    config:
      connections.inputPtcHandles: "linearizerPtc"
      connections.inputLinearizerHandles: "linearizerUnnormalized2"
      connections.outputNormalization: "cpLinearizerNormalization2"
  cpLinearizerSolve:
    class: lsst.cp.pipe.LinearitySolveTask
    config:
      useLinearizerPtc: true
      useFocalPlaneNormalization: true
      connections.inputLinearizerPtc: "linearizerPtc"
      connections.outputLinearizer: "linearizer"
      connections.inputNormalization: "cpLinearizerNormalization2"
      linearityType: "Spline"
      splineKnots: 10
      trimmedState: false
      usePhotodiode: true

subsets:
  cpLinearizerPtc:
    subset:
      - cpLinearizerIsr
      - cpLinearizerPtcExtractPair
      - cpLinearizerPtcSolve
contracts:
  - cpLinearizerIsr.doBootstrap == True
  - cpLinearizerPtcExtractPair.connections.inputExp == cpLinearizerIsr.connections.outputExposure
  - cpLinearizerPtcSolve.binSize == cpLinearizerPtcExtractPair.binSize
  - cpLinearizerPtcSolve.maximumRangeCovariancesAstier == cpLinearizerPtcExtractPair.maximumRangeCovariancesAstier
  - cpLinearizerPtcSolve.connections.inputCovariances == cpLinearizerPtcExtractPair.connections.outputCovariance
  - cpLinearizerSolve.connections.inputLinearizerPtc == cpLinearizerPtcSolve.connections.outputPtcDataset
